// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.3
// source: service.proto

package vulnerability

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Vulnerability_Detect_FullMethodName = "/vulnerability.Vulnerability/Detect"
)

// VulnerabilityClient is the client API for Vulnerability service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VulnerabilityClient interface {
	Detect(ctx context.Context, in *DetectRequest, opts ...grpc.CallOption) (*DetectResponse, error)
}

type vulnerabilityClient struct {
	cc grpc.ClientConnInterface
}

func NewVulnerabilityClient(cc grpc.ClientConnInterface) VulnerabilityClient {
	return &vulnerabilityClient{cc}
}

func (c *vulnerabilityClient) Detect(ctx context.Context, in *DetectRequest, opts ...grpc.CallOption) (*DetectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DetectResponse)
	err := c.cc.Invoke(ctx, Vulnerability_Detect_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VulnerabilityServer is the server API for Vulnerability service.
// All implementations must embed UnimplementedVulnerabilityServer
// for forward compatibility.
type VulnerabilityServer interface {
	Detect(context.Context, *DetectRequest) (*DetectResponse, error)
	mustEmbedUnimplementedVulnerabilityServer()
}

// UnimplementedVulnerabilityServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVulnerabilityServer struct{}

func (UnimplementedVulnerabilityServer) Detect(context.Context, *DetectRequest) (*DetectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Detect not implemented")
}
func (UnimplementedVulnerabilityServer) mustEmbedUnimplementedVulnerabilityServer() {}
func (UnimplementedVulnerabilityServer) testEmbeddedByValue()                       {}

// UnsafeVulnerabilityServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VulnerabilityServer will
// result in compilation errors.
type UnsafeVulnerabilityServer interface {
	mustEmbedUnimplementedVulnerabilityServer()
}

func RegisterVulnerabilityServer(s grpc.ServiceRegistrar, srv VulnerabilityServer) {
	// If the following call pancis, it indicates UnimplementedVulnerabilityServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Vulnerability_ServiceDesc, srv)
}

func _Vulnerability_Detect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VulnerabilityServer).Detect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vulnerability_Detect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VulnerabilityServer).Detect(ctx, req.(*DetectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Vulnerability_ServiceDesc is the grpc.ServiceDesc for Vulnerability service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Vulnerability_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vulnerability.Vulnerability",
	HandlerType: (*VulnerabilityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Detect",
			Handler:    _Vulnerability_Detect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
