// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: service.proto

package vulnerability

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Vulnerability service

func NewVulnerabilityEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Vulnerability service

type VulnerabilityService interface {
	Detect(ctx context.Context, in *DetectRequest, opts ...client.CallOption) (*DetectResponse, error)
}

type vulnerabilityService struct {
	c    client.Client
	name string
}

func NewVulnerabilityService(name string, c client.Client) VulnerabilityService {
	return &vulnerabilityService{
		c:    c,
		name: name,
	}
}

func (c *vulnerabilityService) Detect(ctx context.Context, in *DetectRequest, opts ...client.CallOption) (*DetectResponse, error) {
	req := c.c.NewRequest(c.name, "Vulnerability.Detect", in)
	out := new(DetectResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Vulnerability service

type VulnerabilityHandler interface {
	Detect(context.Context, *DetectRequest, *DetectResponse) error
}

func RegisterVulnerabilityHandler(s server.Server, hdlr VulnerabilityHandler, opts ...server.HandlerOption) error {
	type vulnerability interface {
		Detect(ctx context.Context, in *DetectRequest, out *DetectResponse) error
	}
	type Vulnerability struct {
		vulnerability
	}
	h := &vulnerabilityHandler{hdlr}
	return s.Handle(s.NewHandler(&Vulnerability{h}, opts...))
}

type vulnerabilityHandler struct {
	VulnerabilityHandler
}

func (h *vulnerabilityHandler) Detect(ctx context.Context, in *DetectRequest, out *DetectResponse) error {
	return h.VulnerabilityHandler.Detect(ctx, in, out)
}
